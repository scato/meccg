LOAD JSONL FROM `var/jsonl/${source}.jsonl` AS card
CREATE card;

CREATE INDEX card_set_name ON {set, name};

LOAD JSON FROM "var/schema.json" AS schema
SET @schema = schema;

LOAD JSON FROM `var/json/${source}.json` AS spoiler
WHERE source != "promos"
WITH spoiler AS {cards: {name}[], set}
WHERE NOT EXISTS (
    MATCH {set, name}
)

UNION

LOAD JSON FROM `var/json/promos.json` AS spoiler
WITH spoiler AS {category: set, sets: {cards: {name}[]}[]}
WHERE NOT EXISTS (
    MATCH {set, name}
)

UNION

MATCH card
WHERE card IS NOT JSON(@schema)
RETURN card

UNION

LOAD TEXT FROM `var/regex/${attr}.txt` AS pattern
WITH attr, pattern[] AS patterns
WHERE [
    "set", "type", "alignment",
    "mp", "site_type", "region_type", "name",
    "mind", "gi", "di",
    "race", "class", "region",
    "prowess", "body", "cp"
].includes(attr)
MATCH {set, name} AS card
WHERE card.includes(attr) AND card[attr] != null
SET value = card[attr]
WHERE NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr, value}

UNION

LOAD TEXT FROM `var/regex/${attr}.txt` AS pattern
WITH attr, pattern[] AS patterns
WHERE ["skills", "home_site"].includes(attr)
MATCH {set, name} AS card
WHERE card.includes(attr) AND card[attr] != null
WITH set, name, attr, card[attr] AS value[], patterns
WHERE NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr, value}

UNION

LOAD TEXT FROM `var/regex/text.character.txt` AS pattern
WITH pattern[] AS patterns
MATCH {type: "Character", set, name, text: value[]}
WHERE NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr: "text", value}

UNION

LOAD TEXT FROM `var/regex/text.hazard-agent.txt` AS pattern
WITH pattern[] AS patterns
MATCH {type: "Hazard", class: "Agent", set, name, text: value[]}
WHERE NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr: "text", value}

UNION

LOAD TEXT FROM `var/regex/text.hazard-creature.txt` AS pattern
WITH pattern[] AS patterns
MATCH {type: "Hazard", class, set, name, text: value[]}
WHERE class.includes("Creature")
AND NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr: "text", value}

UNION

LOAD TEXT FROM `var/regex/text.hazard-event.txt` AS pattern
WITH pattern[] AS patterns
MATCH {type: "Hazard", class, set, name, text: value[]}
WHERE class != "Agent" AND NOT class.includes("Creature")
AND NOT EXISTS (
    WITH value, patterns AS pattern[]
    WHERE value.match("^" + pattern + "$")
)
RETURN {set, name, attr: "text", value};
/*
ORDER BY value
SET value = value
    .replace("+", "\\+")
    .replace(".", "\\.")
    .replace("(", "\\(")
    .replace(")", "\\)")
    .replace("[", "\\[")
    .replace("]", "\\]")
    .replace("*", "\\*")
SAVE TEXT value TO "text.hazard-event.missing.txt";
*/
